// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/upgradeconfig/cluster_upgrader.go

// Package mock_upgradeconfig is a generated GoMock package.
package mocks

import (
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openshift/managed-upgrade-operator/pkg/apis/upgrade/v1alpha1"
	maintenance "github.com/openshift/managed-upgrade-operator/pkg/maintenance"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClusterUpgrader is a mock of ClusterUpgrader interface
type MockClusterUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockClusterUpgraderMockRecorder
}

// MockClusterUpgraderMockRecorder is the mock recorder for MockClusterUpgrader
type MockClusterUpgraderMockRecorder struct {
	mock *MockClusterUpgrader
}

// NewMockClusterUpgrader creates a new mock instance
func NewMockClusterUpgrader(ctrl *gomock.Controller) *MockClusterUpgrader {
	mock := &MockClusterUpgrader{ctrl: ctrl}
	mock.recorder = &MockClusterUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterUpgrader) EXPECT() *MockClusterUpgraderMockRecorder {
	return m.recorder
}

// UpgradeCluster mocks base method
func (m_2 *MockClusterUpgrader) UpgradeCluster(c client.Client, m maintenance.Maintenance, upgradeConfig *v1alpha1.UpgradeConfig, reqLogger logr.Logger) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpgradeCluster", c, m, upgradeConfig, reqLogger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeCluster indicates an expected call of UpgradeCluster
func (mr *MockClusterUpgraderMockRecorder) UpgradeCluster(c, m, upgradeConfig, reqLogger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockClusterUpgrader)(nil).UpgradeCluster), c, m, upgradeConfig, reqLogger)
}
