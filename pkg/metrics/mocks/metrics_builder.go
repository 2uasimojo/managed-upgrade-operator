// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/metrics (interfaces: MetricsBuilder)
//
// Generated by this command:
//
//	mockgen -destination=mocks/metrics_builder.go -package=mocks github.com/openshift/managed-upgrade-operator/pkg/metrics MetricsBuilder
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	metrics "github.com/openshift/managed-upgrade-operator/pkg/metrics"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMetricsBuilder is a mock of MetricsBuilder interface.
type MockMetricsBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsBuilderMockRecorder
}

// MockMetricsBuilderMockRecorder is the mock recorder for MockMetricsBuilder.
type MockMetricsBuilderMockRecorder struct {
	mock *MockMetricsBuilder
}

// NewMockMetricsBuilder creates a new mock instance.
func NewMockMetricsBuilder(ctrl *gomock.Controller) *MockMetricsBuilder {
	mock := &MockMetricsBuilder{ctrl: ctrl}
	mock.recorder = &MockMetricsBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsBuilder) EXPECT() *MockMetricsBuilderMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockMetricsBuilder) NewClient(arg0 client.Client) (metrics.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", arg0)
	ret0, _ := ret[0].(metrics.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockMetricsBuilderMockRecorder) NewClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockMetricsBuilder)(nil).NewClient), arg0)
}
