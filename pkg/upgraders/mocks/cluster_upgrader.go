// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/upgraders (interfaces: ClusterUpgrader)
//
// Generated by this command:
//
//	mockgen -destination=mocks/cluster_upgrader.go -package=mocks github.com/openshift/managed-upgrade-operator/pkg/upgraders ClusterUpgrader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	logr "github.com/go-logr/logr"
	v1alpha1 "github.com/openshift/managed-upgrade-operator/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterUpgrader is a mock of ClusterUpgrader interface.
type MockClusterUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockClusterUpgraderMockRecorder
}

// MockClusterUpgraderMockRecorder is the mock recorder for MockClusterUpgrader.
type MockClusterUpgraderMockRecorder struct {
	mock *MockClusterUpgrader
}

// NewMockClusterUpgrader creates a new mock instance.
func NewMockClusterUpgrader(ctrl *gomock.Controller) *MockClusterUpgrader {
	mock := &MockClusterUpgrader{ctrl: ctrl}
	mock.recorder = &MockClusterUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterUpgrader) EXPECT() *MockClusterUpgraderMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockClusterUpgrader) HealthCheck(arg0 context.Context, arg1 *v1alpha1.UpgradeConfig, arg2 logr.Logger) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockClusterUpgraderMockRecorder) HealthCheck(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockClusterUpgrader)(nil).HealthCheck), arg0, arg1, arg2)
}

// UpgradeCluster mocks base method.
func (m *MockClusterUpgrader) UpgradeCluster(arg0 context.Context, arg1 *v1alpha1.UpgradeConfig, arg2 logr.Logger) (v1alpha1.UpgradePhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.UpgradePhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockClusterUpgraderMockRecorder) UpgradeCluster(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockClusterUpgrader)(nil).UpgradeCluster), arg0, arg1, arg2)
}
