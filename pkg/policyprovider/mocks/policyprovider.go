// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/policyprovider (interfaces: PolicyProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openshift/managed-upgrade-operator/pkg/apis/upgrade/v1alpha1"
)

// MockPolicyProvider is a mock of PolicyProvider interface.
type MockPolicyProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyProviderMockRecorder
}

// MockPolicyProviderMockRecorder is the mock recorder for MockPolicyProvider.
type MockPolicyProviderMockRecorder struct {
	mock *MockPolicyProvider
}

// NewMockPolicyProvider creates a new mock instance.
func NewMockPolicyProvider(ctrl *gomock.Controller) *MockPolicyProvider {
	mock := &MockPolicyProvider{ctrl: ctrl}
	mock.recorder = &MockPolicyProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyProvider) EXPECT() *MockPolicyProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPolicyProvider) Get() ([]v1alpha1.UpgradeConfigSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]v1alpha1.UpgradeConfigSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicyProviderMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicyProvider)(nil).Get))
}
