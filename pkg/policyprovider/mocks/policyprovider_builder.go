// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/policyprovider (interfaces: PolicyProviderBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	configmanager "github.com/openshift/managed-upgrade-operator/pkg/configmanager"
	policyprovider "github.com/openshift/managed-upgrade-operator/pkg/policyprovider"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockPolicyProviderBuilder is a mock of PolicyProviderBuilder interface.
type MockPolicyProviderBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyProviderBuilderMockRecorder
}

// MockPolicyProviderBuilderMockRecorder is the mock recorder for MockPolicyProviderBuilder.
type MockPolicyProviderBuilderMockRecorder struct {
	mock *MockPolicyProviderBuilder
}

// NewMockPolicyProviderBuilder creates a new mock instance.
func NewMockPolicyProviderBuilder(ctrl *gomock.Controller) *MockPolicyProviderBuilder {
	mock := &MockPolicyProviderBuilder{ctrl: ctrl}
	mock.recorder = &MockPolicyProviderBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyProviderBuilder) EXPECT() *MockPolicyProviderBuilderMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockPolicyProviderBuilder) New(arg0 client.Client, arg1 configmanager.ConfigManagerBuilder) (policyprovider.PolicyProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(policyprovider.PolicyProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockPolicyProviderBuilderMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPolicyProviderBuilder)(nil).New), arg0, arg1)
}
